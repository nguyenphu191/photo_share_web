import React, { useEffect, useState, useCallback } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

const UserList = ({ onSelectUser, selectedUser, onError, onLoadingChange, currentUser }) => {
    // === KHAI B√ÅO STATE ===
    // State l∆∞u danh s√°ch t·∫•t c·∫£ users t·ª´ server
    const [users, setUsers] = useState([]);
    
    // State qu·∫£n l√Ω loading khi fetch users
    const [loading, setLoading] = useState(true);
    
    // State qu·∫£n l√Ω error local cho component n√†y
    const [error, setError] = useState('');
    
    // State l∆∞u th√¥ng tin user ƒëang ƒëƒÉng nh·∫≠p t·ª´ localStorage
    const [loggedUser, setLoggedUser] = useState(null);
    
    // State qu·∫£n l√Ω search (c√≥ th·ªÉ th√™m sau)
    const [searchTerm, setSearchTerm] = useState('');

    // Effect ƒë·ªÉ l·∫•y user t·ª´ localStorage v√† fetch danh s√°ch users
    useEffect(() => {
        // L·∫•y th√¥ng tin user ƒë√£ ƒëƒÉng nh·∫≠p t·ª´ localStorage
        const getUserFromStorage = () => {
            try {
                const userString = localStorage.getItem('user');
                if (userString) {
                    const user = JSON.parse(userString);
                    setLoggedUser(user);
                    return user;
                }
                return null;
            } catch (error) {
                console.error('L·ªói khi parse user t·ª´ localStorage:', error);
                if (onError) {
                    onError('Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá');
                }
                return null;
            }
        };

        const user = getUserFromStorage();
        
        // Fetch danh s√°ch users
        if (user) {
            fetchUsers();
        }
    }, [onError]);

    // Effect ƒë·ªÉ th√¥ng b√°o loading state l√™n parent component
    useEffect(() => {
        if (onLoadingChange) {
            onLoadingChange(loading);
        }
    }, [loading, onLoadingChange]);

    // H√†m fetch danh s√°ch users t·ª´ server
    const fetchUsers = useCallback(async () => {
        try {
            setLoading(true);
            setError('');

            const response = await axios.get(
                'http://localhost:8000/api/user/list',
                {
                    timeout: 10000, // Timeout 10 gi√¢y
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }
            );

            // Ki·ªÉm tra response data
            if (response.data && Array.isArray(response.data)) {
                setUsers(response.data);
            } else {
                throw new Error('D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ server');
            }

        } catch (error) {
            console.error('L·ªói khi fetch users:', error);
            
            let errorMessage = 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng';
            
            if (error.code === 'NETWORK_ERROR') {
                errorMessage = 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra internet';
            } else if (error.response?.status === 500) {
                errorMessage = 'L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau';
            } else if (error.response?.status === 404) {
                errorMessage = 'Kh√¥ng t√¨m th·∫•y danh s√°ch ng∆∞·ªùi d√πng';
            }
            
            setError(errorMessage);
            setUsers([]); // Set empty array ƒë·ªÉ tr√°nh l·ªói map
            
            // Th√¥ng b√°o error l√™n parent component
            if (onError) {
                onError(errorMessage);
            }
        } finally {
            setLoading(false);
        }
    }, [onError]);

    // X·ª≠ l√Ω khi user click v√†o m·ªôt user trong danh s√°ch
    const handleUserSelect = useCallback((userId, event) => {
        // NgƒÉn default action c·ªßa Link
        if (event) {
            event.preventDefault();
        }

        // Ki·ªÉm tra userId h·ª£p l·ªá
        if (!userId) {
            console.error('User ID kh√¥ng h·ª£p l·ªá');
            return;
        }

        // G·ªçi callback ƒë·ªÉ th√¥ng b√°o l√™n parent component
        if (onSelectUser) {
            onSelectUser(userId);
        }
    }, [onSelectUser]);

    // X·ª≠ l√Ω retry khi c√≥ l·ªói
    const handleRetry = useCallback(() => {
        fetchUsers();
    }, [fetchUsers]);

    // L·ªçc users ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã user hi·ªán t·∫°i v√† filter theo search
    const getFilteredUsers = useCallback(() => {
        let filteredUsers = users;

        // Lo·∫°i b·ªè user hi·ªán t·∫°i kh·ªèi danh s√°ch
        if (loggedUser?._id) {
            filteredUsers = filteredUsers.filter(user => user._id !== loggedUser._id);
        }

        // Filter theo search term (n·∫øu c√≥)
        if (searchTerm.trim()) {
            const searchLower = searchTerm.toLowerCase().trim();
            filteredUsers = filteredUsers.filter(user => 
                user.first_name?.toLowerCase().includes(searchLower) ||
                user.last_name?.toLowerCase().includes(searchLower) ||
                user.login_name?.toLowerCase().includes(searchLower)
            );
        }

        return filteredUsers;
    }, [users, loggedUser, searchTerm]);

    // T·∫°o URL avatar cho user
   const getUserAvatarUrl = useCallback((user) => {
           if (user?.avatar) {
               return `http://localhost:8000${user.avatar}`;
           }
           if (!user?.last_name) {
               return '/images/default.jpg';
           }
           return `/images/${user.last_name.toLowerCase()}.jpg`;
       }, []);

    // Ki·ªÉm tra user c√≥ ƒëang ƒë∆∞·ª£c select kh√¥ng
    const isUserSelected = useCallback((userId) => {
        return selectedUser === userId;
    }, [selectedUser]);

    const filteredUsers = getFilteredUsers();

    return (
        <div className="userhome">
            <div className="userList">
                {/* Header */}
                <h2>Danh s√°ch ng∆∞·ªùi d√πng</h2>

               
                {loading ? (
                    /* Loading State */
                    <div className="loading-users">
                        <div className="loading-spinner"></div>
                        <p>ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...</p>
                    </div>
                ) : error ? (
                    /* Error State */
                    <div className="empty-users">
                        <div className="empty-icon">‚ùå</div>
                        <h3>C√≥ l·ªói x·∫£y ra</h3>
                        <p>{error}</p>
                        <button 
                            onClick={handleRetry}
                            className="retry-btn"
                        >
                            Th·ª≠ l·∫°i
                        </button>
                    </div>
                ) : filteredUsers.length === 0 ? (
                    /* Empty State */
                    <div className="empty-users">
                        <div className="empty-icon">üë•</div>
                        <h3>Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o</h3>
                        <p>
                            {searchTerm ? 
                                'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ph√π h·ª£p v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm' : 
                                'Hi·ªán t·∫°i ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o kh√°c trong h·ªá th·ªëng'
                            }
                        </p>
                        {searchTerm && (
                            <button 
                                onClick={() => setSearchTerm('')}
                                className="clear-search-btn"
                            >
                                X√≥a t√¨m ki·∫øm
                            </button>
                        )}
                    </div>
                ) : (
                    /* Users List */
                    <ul>
                        {filteredUsers.map((user) => (
                            <li 
                                key={user._id} 
                                className={`user ${isUserSelected(user._id) ? 'selected' : ''}`}
                                onClick={(e) => handleUserSelect(user._id, e)}
                            >
                                <Link 
                                    to={`/user/${user._id}`}
                                    onClick={(e) => e.preventDefault()} // Prevent navigation, ch·ªâ d√πng ƒë·ªÉ select
                                >
                                    <img 
                                        src={getUserAvatarUrl(user)}
                                        alt={`Avatar c·ªßa ${user.first_name} ${user.last_name}`}
                                        onError={(e) => {
                                            e.target.src = '/images/default.jpg';
                                        }}
                                    />
                                    <div className="userDetails">
                                        <span>
                                            {user.first_name} {user.last_name}
                                        </span>
                                        {user.occupation && (
                                            <small className="user-occupation">
                                                {user.occupation}
                                            </small>
                                        )}
                                    </div>
                                </Link>
                            </li>
                        ))}
                    </ul>
                )}
            </div>
        </div>
    );
};

export default UserList;